"use strict";

/**
 * Write your solutions here.
 *
 * **Note**: While normally it is good practice to wrap your javascript in an
 * immediately invoked function expression (iife), you should _not_ do that
 * here. If you do, the automated tests will not be able to see your functions.
 * If you don't know what an iffe is, don't worry about it :)
 *
 * This file is for defining the following functions. See README.md for more detail.
 * isTrue
 * isFalse
 * not
 * addOne
 * isEven
 * isIdentical
 * isEqual
 * or
 * and
 * concat
 */

    function isTrue(input) {
        if(input === true){
            return true;
        } else {
            return false;
        }

    }


    function isFalse(input) {
        if (input === false) {
            return true;
        }else {
            return false;
        }
    }

    function not(parameter) {
        return !parameter;
    }

    function addOne(input) {
        input = parseFloat(input);
        return input + 1;
    }

    function isEven(input) {
        input = parseFloat(input);
        return input % 2 === 0
    }

    function isIdentical(input, input1) {
        return input === input1;
    }

    function isEqual(input, input1) {
        return input == input1;
    }

    function or(input, input1) {
        return input || input1;
    }

    function and(input, input1){
        return input && input1;
    }








    "use strict";

    /**
     * Write your solutions here.
     *
     * **Note**: While normally it is good practice to wrap your javascript in an
     * immediately invoked function expression (iife), you should _not_ do that
     * here. If you do, the automated tests will not be able to see your functions.
     * If you don't know what an iffe is, don't worry about it :)
     *
     * This file is for defining the following functions. See README.md for more detail.
     * isTrue
     * isFalse
     * not
     * addOne
     * isEven
     * isIdentical
     * isEqual
     * or
     * and
     * concat
     */

    // isTrue function should take in any input and return true if that input is exactly true
    function isTrue(input) {
      // return input === true;
      // return returns expressions

      if(input === true) {
        return true;
      } else {
        return false;
      }
    }


    function isFalse(input) {
      return input === false;
    }//yay!


    // write a not() function that takes in any input and returns its boolean opposite
    function not(parameter) {
      return !parameter;
    }

    //Define a function named addOne that takes in a single input.
    //If the input is a number or a numeric string, return the value plus one.

    function addOne(input) {
      // the new value for input is parseFloat on the original value
      // reassignment
      input = parseFloat(input);
      return input + 1;

    }

    //Define a function named isEven that takes in a single input. If the input is an
    // even number or a string containing an even number, return true. Any other input should return false for the output.
    // function isEven(input){
    //     input = parseFloat(input);
    //     return input % 2 === 0;
    // }
    //parseFloat() is stricter than Number() so parseFloat(true) returns NaN and Number(true) returns 1
    function isEven(singleInput) {
        if(typeof singleInput === "boolean") {
          return false;
        }
        return singleInput % 2 === 0;
    }

    //Define a function named isIdentical that takes in two input arguments. If each input is equal both in data type and in value,
    // then return true. If the values are not the same data type or not the same value, return false.
    function isIdentical(input1, input2){
        return input1 === input2;
    }

    function isEqual(input1, input2) {
        return input1 == input2;
    }

    function or(a, b) {
      return a || b;
    }

    function and(a, b) {
      return a && b;
    }

    function concat(a, b) {
      return a.toString() + b.toString();
    }

    // function concat(x, y) {
    //    return "" + x + y;
    //}

    function concat(input, input1) {
        return input + input1.toString();
    }